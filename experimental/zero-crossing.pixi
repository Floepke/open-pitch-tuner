set_pixel_size( WINDOW_XSIZE / 1024 )
resize( get_screen(), WINDOW_XSIZE, WINDOW_YSIZE )

buf_size = 4096
samp_rate = 44100
visual_buf = new( buf_size, 1, FLOAT )
clean( visual_buf )

// create lists for fft
im = new( buf_size, 1, FLOAT )
re = new( buf_size, 1, FLOAT )

set_audio_callback( audio_callback, 0, samp_rate, FLOAT, 2 )
enable_audio_input( 1 )

// creating a list with fft frequency
freq = new(buf_size/2,1,FLOAT)
clean(freq)
i = 0 while i < buf_size / 2
{
    freq[i] = samp_rate / buf_size * i
    //printf("%i: %f\n", i+1, freq[i])
    i + 1
}

lst = new(samp_rate * 10,1,FLOAT)
clean(lst)

scr = get_screen()
xsize = WINDOW_XSIZE
ysize = WINDOW_YSIZE
left = -xsize/2
right = xsize/2
top = -ysize/2
bottom = ysize/2

// mainloop
while 1
{
    while( get_event() ) { if EVT[ EVT_TYPE ] == EVT_QUIT { halt } }

    clear()

    // detecting pitch and writing to the display
    frequency = zero_crossing_analyser(visual_buf)
    $zero_cross = ""
    num_to_str($zero_cross,frequency)
    t_scale(2,2,2)
    print($zero_cross,0,0,RED)
    print("Zero-crossing frequency analyser",0,10,RED)
    t_reset()

    frame()
}

//////////////
// ANALYSER //
//////////////
fn zero_crossing_analyser($sig)
{
    crossings = 0
    prev_x = 0

    // determine the best fitting dc point for the current buffer signal
    $h = -1
    $l = 1
    $x = 0 while $x < buf_size
    {
        if $sig[$x] > $h {$h = $sig[$x]}
        if $sig[$x] < $l {$l = $sig[$x]}
        $x + 1
    }
    $dc = middle($l,$h)

    i = 0 while i < buf_size
    {
        $s = $sig[i]
        
        // first iteration
        if i == 0
        {
            i + 1
            prev_x = $s
            continue
        }

        // check for dc crossing
        if prev_x <= $dc
        {
            if $s > $dc {crossings + 1}
        }
        if prev_x > $dc 
        {
            if $s < $dc {crossings + 1}
        }
        prev_x = $s
        i + 1
    }
    // It results about the same way as sunvox pitch detector zero cross. 
    // Not very precise because noice can increase the outcome.
    $out = crossings * (samp_rate / buf_size)
    ret($out) 
}


///////////
// TOOLS //
///////////
fn interpolation($x, $y, $z) {ret(($z - $x) / ($y - $x))}

// Returns the highest number comparing $x and $y
fn highest($x, $y) {if $x >= $y {ret($x)} else {ret($y)}}

// Returns the lowest number comparing $x and $y
fn lowest($x, $y) {if $x <= $y {ret($x)} else {ret($y)}}

// Get the difference between $x and $y as a positive number.
fn diff($x, $y) {ret(highest($x, $y) - lowest($x, $y))}

// Returns the opposit of $x (-1 becomes +1; +1 becomes -1)
fn opposit($x) {if $x >= 0 {$out = 0 - $x} else {$out = 0 + diff($x, 0)} ret($out)}

// returns the number that's in the middle of $x and $y
fn middle($x, $y) {ret(lowest($x, $y) + (diff($x, $y) / 2))}

// audio callback
fn audio_callback(
    $stream, 
    $userdata, 
    $channels, 
    $frames, 
    $output_time_in_system_ticks, 
    $in_channels, 
    $latency_in_frames )
{
    if $in_channels >= 0
    {
    copy( visual_buf, $in_channels[ 0 ] )
    }
    ret( 0 ) //output is empty
}